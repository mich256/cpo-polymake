load('alcoved.sage')

#pi = DecoratedPermutation([1,3,2],[0]*3)
pi = DecoratedPermutation([3,1,6,5,2,4],[0]*6)
G = DP_to_GN(pi); G
BDP = GN_to_bdp(G); BDP
P = Positroid(G)
P.cover_stats()
P.cover_no()
trueP = P.projected_polytope
load('hstar.sage')
trueP.volume()
trueP.h_star_vector()

R = RootSystem(['A', 5])
Q = AlcovedPolytope(R, BDP)

R = RootSystem(['A',3])
theta = R.root_space().highest_root()
bdp = {theta: [1,2]}
for sr in R.root_space().simple_roots():
	bdp[sr] = [0,1]
Q = AlcovedPolytope(R, bdp)
qb = Q.quotient_basis
foo = []
for i in (1..3):
	for j in (1..3):
		for k in (1..3):
			rhoh = i*qb[0]+j*qb[1]+k*qb[2]
			if Q.is_member(rhoh):
				foo.append(rhoh)
foo

trueP = P.projected_polytope
load('hstar.sage')
trueP.volume()
trueP.h_star_vector()
R = RootSystem(['B',4])
W = WeylGroup(['B',4])
A = W.domain().simple_roots()
w = W[5]
alpha = R.root_space().simple_roots()[2]
alpha = R_to_W(R,alpha)
beta = R.root_space().roots()[6]
inv(R,w,alpha)
cdes(R,w)
cdes_wrt_root(R,w,beta)

for dp in gen_dec_perm(5):
	gn = DP_to_GN(dp)
	P = Positroid(gn)
	M = P.all_members()
	if len(M) != 0:
		P.graph_dict()
		P.gen_graph()
		

